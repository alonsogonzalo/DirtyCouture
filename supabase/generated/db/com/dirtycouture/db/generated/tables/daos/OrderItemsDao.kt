/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.tables.OrderItems
import com.dirtycouture.db.generated.tables.records.OrderItemsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrderItemsDao(configuration: Configuration?) : DAOImpl<OrderItemsRecord, com.dirtycouture.db.generated.tables.pojos.OrderItems, Long>(OrderItems.ORDER_ITEMS, com.dirtycouture.db.generated.tables.pojos.OrderItems::class.java, configuration) {

    /**
     * Create a new OrderItemsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.OrderItems): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.OrderItems? = fetchOne(OrderItems.ORDER_ITEMS.ID, value)

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.ORDER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>product_variant_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfProductVariantId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.PRODUCT_VARIANT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_variant_id IN (values)</code>
     */
    fun fetchByProductVariantId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.PRODUCT_VARIANT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>quantity BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfQuantity(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.QUANTITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>quantity IN (values)</code>
     */
    fun fetchByQuantity(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.QUANTITY, *values.toTypedArray())

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrice(lowerInclusive: Double?, upperInclusive: Double?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.PRICE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    fun fetchByPrice(vararg values: Double): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.PRICE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetchRange(OrderItems.ORDER_ITEMS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.OrderItems> = fetch(OrderItems.ORDER_ITEMS.CREATED_AT, *values)
}

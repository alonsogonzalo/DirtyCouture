/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.enums.PaymentStatus
import com.dirtycouture.db.generated.tables.Payments
import com.dirtycouture.db.generated.tables.records.PaymentsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentsDao(configuration: Configuration?) : DAOImpl<PaymentsRecord, com.dirtycouture.db.generated.tables.pojos.Payments, Long>(Payments.PAYMENTS, com.dirtycouture.db.generated.tables.pojos.Payments::class.java, configuration) {

    /**
     * Create a new PaymentsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.Payments): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.Payments? = fetchOne(Payments.PAYMENTS.ID, value)

    /**
     * Fetch records that have <code>order_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfOrderId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.ORDER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>order_id IN (values)</code>
     */
    fun fetchByOrderId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.ORDER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>stripe_payment_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfStripePaymentId(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.STRIPE_PAYMENT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>stripe_payment_id IN (values)</code>
     */
    fun fetchByStripePaymentId(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.STRIPE_PAYMENT_ID, *values)

    /**
     * Fetch a unique record that has <code>stripe_payment_id = value</code>
     */
    fun fetchOneByStripePaymentId(value: String): com.dirtycouture.db.generated.tables.pojos.Payments? = fetchOne(Payments.PAYMENTS.STRIPE_PAYMENT_ID, value)

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAmount(lowerInclusive: Double?, upperInclusive: Double?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.AMOUNT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    fun fetchByAmount(vararg values: Double): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.AMOUNT, *values.toTypedArray())

    /**
     * Fetch records that have <code>payment_method BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPaymentMethod(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.PAYMENT_METHOD, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>payment_method IN (values)</code>
     */
    fun fetchByPaymentMethod(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.PAYMENT_METHOD, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: PaymentStatus?, upperInclusive: PaymentStatus?): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetchRange(Payments.PAYMENTS.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: PaymentStatus): List<com.dirtycouture.db.generated.tables.pojos.Payments> = fetch(Payments.PAYMENTS.STATUS, *values)
}

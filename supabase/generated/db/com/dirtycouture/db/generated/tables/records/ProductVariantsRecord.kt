/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.enums.Sizes
import com.dirtycouture.db.generated.tables.ProductVariants

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductVariantsRecord() : UpdatableRecordImpl<ProductVariantsRecord>(ProductVariants.PRODUCT_VARIANTS), Record8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var productId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var size: Sizes?
        set(value): Unit = set(2, value)
        get(): Sizes? = get(2) as Sizes?

    open var color: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var stock: BigDecimal?
        set(value): Unit = set(4, value)
        get(): BigDecimal? = get(4) as BigDecimal?

    open var price: Double?
        set(value): Unit = set(5, value)
        get(): Double? = get(5) as Double?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(6, value)
        get(): OffsetDateTime? = get(6) as OffsetDateTime?

    open var imageUrl: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?> = super.fieldsRow() as Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?>
    override fun valuesRow(): Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?> = super.valuesRow() as Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?>
    override fun field1(): Field<Long?> = ProductVariants.PRODUCT_VARIANTS.ID
    override fun field2(): Field<Long?> = ProductVariants.PRODUCT_VARIANTS.PRODUCT_ID
    override fun field3(): Field<Sizes?> = ProductVariants.PRODUCT_VARIANTS.SIZE
    override fun field4(): Field<String?> = ProductVariants.PRODUCT_VARIANTS.COLOR
    override fun field5(): Field<BigDecimal?> = ProductVariants.PRODUCT_VARIANTS.STOCK
    override fun field6(): Field<Double?> = ProductVariants.PRODUCT_VARIANTS.PRICE
    override fun field7(): Field<OffsetDateTime?> = ProductVariants.PRODUCT_VARIANTS.CREATED_AT
    override fun field8(): Field<String?> = ProductVariants.PRODUCT_VARIANTS.IMAGE_URL
    override fun component1(): Long? = id
    override fun component2(): Long? = productId
    override fun component3(): Sizes? = size
    override fun component4(): String? = color
    override fun component5(): BigDecimal? = stock
    override fun component6(): Double? = price
    override fun component7(): OffsetDateTime? = createdAt
    override fun component8(): String? = imageUrl
    override fun value1(): Long? = id
    override fun value2(): Long? = productId
    override fun value3(): Sizes? = size
    override fun value4(): String? = color
    override fun value5(): BigDecimal? = stock
    override fun value6(): Double? = price
    override fun value7(): OffsetDateTime? = createdAt
    override fun value8(): String? = imageUrl

    override fun value1(value: Long?): ProductVariantsRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): ProductVariantsRecord {
        this.productId = value
        return this
    }

    override fun value3(value: Sizes?): ProductVariantsRecord {
        this.size = value
        return this
    }

    override fun value4(value: String?): ProductVariantsRecord {
        this.color = value
        return this
    }

    override fun value5(value: BigDecimal?): ProductVariantsRecord {
        this.stock = value
        return this
    }

    override fun value6(value: Double?): ProductVariantsRecord {
        this.price = value
        return this
    }

    override fun value7(value: OffsetDateTime?): ProductVariantsRecord {
        this.createdAt = value
        return this
    }

    override fun value8(value: String?): ProductVariantsRecord {
        this.imageUrl = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Sizes?, value4: String?, value5: BigDecimal?, value6: Double?, value7: OffsetDateTime?, value8: String?): ProductVariantsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised ProductVariantsRecord
     */
    constructor(id: Long? = null, productId: Long? = null, size: Sizes? = null, color: String? = null, stock: BigDecimal? = null, price: Double? = null, createdAt: OffsetDateTime? = null, imageUrl: String? = null): this() {
        this.id = id
        this.productId = productId
        this.size = size
        this.color = color
        this.stock = stock
        this.price = price
        this.createdAt = createdAt
        this.imageUrl = imageUrl
    }

    /**
     * Create a detached, initialised ProductVariantsRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.ProductVariants?): this() {
        if (value != null) {
            this.id = value.id
            this.productId = value.productId
            this.size = value.size
            this.color = value.color
            this.stock = value.stock
            this.price = value.price
            this.createdAt = value.createdAt
            this.imageUrl = value.imageUrl
        }
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.tables.Products
import com.dirtycouture.db.generated.tables.records.ProductsRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductsDao(configuration: Configuration?) : DAOImpl<ProductsRecord, com.dirtycouture.db.generated.tables.pojos.Products, Long>(Products.PRODUCTS, com.dirtycouture.db.generated.tables.pojos.Products::class.java, configuration) {

    /**
     * Create a new ProductsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.Products): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.Products? = fetchOne(Products.PRODUCTS.ID, value)

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfName(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    fun fetchByName(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.NAME, *values)

    /**
     * Fetch a unique record that has <code>name = value</code>
     */
    fun fetchOneByName(value: String): com.dirtycouture.db.generated.tables.pojos.Products? = fetchOne(Products.PRODUCTS.NAME, value)

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfDescription(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.DESCRIPTION, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    fun fetchByDescription(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.DESCRIPTION, *values)

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrice(lowerInclusive: Double?, upperInclusive: Double?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.PRICE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    fun fetchByPrice(vararg values: Double): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.PRICE, *values.toTypedArray())

    /**
     * Fetch records that have <code>image_url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfImageUrl(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.IMAGE_URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>image_url IN (values)</code>
     */
    fun fetchByImageUrl(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.IMAGE_URL, *values)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetchRange(Products.PRODUCTS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.Products> = fetch(Products.PRODUCTS.CREATED_AT, *values)

    /**
     * Fetch a unique record that has <code>created_at = value</code>
     */
    fun fetchOneByCreatedAt(value: OffsetDateTime): com.dirtycouture.db.generated.tables.pojos.Products? = fetchOne(Products.PRODUCTS.CREATED_AT, value)
}

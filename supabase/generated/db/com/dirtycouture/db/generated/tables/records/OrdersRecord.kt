/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.tables.Orders

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrdersRecord() : UpdatableRecordImpl<OrdersRecord>(Orders.ORDERS), Record6<Long?, Long?, Long?, Double?, Short?, OffsetDateTime?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var userId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var shippingAddressId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var total: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    open var status: Short?
        set(value): Unit = set(4, value)
        get(): Short? = get(4) as Short?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, Long?, Long?, Double?, Short?, OffsetDateTime?> = super.fieldsRow() as Row6<Long?, Long?, Long?, Double?, Short?, OffsetDateTime?>
    override fun valuesRow(): Row6<Long?, Long?, Long?, Double?, Short?, OffsetDateTime?> = super.valuesRow() as Row6<Long?, Long?, Long?, Double?, Short?, OffsetDateTime?>
    override fun field1(): Field<Long?> = Orders.ORDERS.ID
    override fun field2(): Field<Long?> = Orders.ORDERS.USER_ID
    override fun field3(): Field<Long?> = Orders.ORDERS.SHIPPING_ADDRESS_ID
    override fun field4(): Field<Double?> = Orders.ORDERS.TOTAL
    override fun field5(): Field<Short?> = Orders.ORDERS.STATUS
    override fun field6(): Field<OffsetDateTime?> = Orders.ORDERS.CREATED_AT
    override fun component1(): Long? = id
    override fun component2(): Long? = userId
    override fun component3(): Long? = shippingAddressId
    override fun component4(): Double? = total
    override fun component5(): Short? = status
    override fun component6(): OffsetDateTime? = createdAt
    override fun value1(): Long? = id
    override fun value2(): Long? = userId
    override fun value3(): Long? = shippingAddressId
    override fun value4(): Double? = total
    override fun value5(): Short? = status
    override fun value6(): OffsetDateTime? = createdAt

    override fun value1(value: Long?): OrdersRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): OrdersRecord {
        this.userId = value
        return this
    }

    override fun value3(value: Long?): OrdersRecord {
        this.shippingAddressId = value
        return this
    }

    override fun value4(value: Double?): OrdersRecord {
        this.total = value
        return this
    }

    override fun value5(value: Short?): OrdersRecord {
        this.status = value
        return this
    }

    override fun value6(value: OffsetDateTime?): OrdersRecord {
        this.createdAt = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: Double?, value5: Short?, value6: OffsetDateTime?): OrdersRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    constructor(id: Long? = null, userId: Long? = null, shippingAddressId: Long? = null, total: Double? = null, status: Short? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.shippingAddressId = shippingAddressId
        this.total = total
        this.status = status
        this.createdAt = createdAt
    }

    /**
     * Create a detached, initialised OrdersRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.Orders?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.shippingAddressId = value.shippingAddressId
            this.total = value.total
            this.status = value.status
            this.createdAt = value.createdAt
        }
    }
}

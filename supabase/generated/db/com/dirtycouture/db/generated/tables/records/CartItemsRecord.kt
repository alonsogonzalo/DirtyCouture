/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.tables.CartItems

import java.math.BigDecimal
import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CartItemsRecord() : UpdatableRecordImpl<CartItemsRecord>(CartItems.CART_ITEMS), Record5<Long?, Long?, Long?, BigDecimal?, OffsetDateTime?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var userId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var productVariantId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var quantity: BigDecimal?
        set(value): Unit = set(3, value)
        get(): BigDecimal? = get(3) as BigDecimal?

    open var addedAt: OffsetDateTime?
        set(value): Unit = set(4, value)
        get(): OffsetDateTime? = get(4) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, Long?, Long?, BigDecimal?, OffsetDateTime?> = super.fieldsRow() as Row5<Long?, Long?, Long?, BigDecimal?, OffsetDateTime?>
    override fun valuesRow(): Row5<Long?, Long?, Long?, BigDecimal?, OffsetDateTime?> = super.valuesRow() as Row5<Long?, Long?, Long?, BigDecimal?, OffsetDateTime?>
    override fun field1(): Field<Long?> = CartItems.CART_ITEMS.ID
    override fun field2(): Field<Long?> = CartItems.CART_ITEMS.USER_ID
    override fun field3(): Field<Long?> = CartItems.CART_ITEMS.PRODUCT_VARIANT_ID
    override fun field4(): Field<BigDecimal?> = CartItems.CART_ITEMS.QUANTITY
    override fun field5(): Field<OffsetDateTime?> = CartItems.CART_ITEMS.ADDED_AT
    override fun component1(): Long? = id
    override fun component2(): Long? = userId
    override fun component3(): Long? = productVariantId
    override fun component4(): BigDecimal? = quantity
    override fun component5(): OffsetDateTime? = addedAt
    override fun value1(): Long? = id
    override fun value2(): Long? = userId
    override fun value3(): Long? = productVariantId
    override fun value4(): BigDecimal? = quantity
    override fun value5(): OffsetDateTime? = addedAt

    override fun value1(value: Long?): CartItemsRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): CartItemsRecord {
        this.userId = value
        return this
    }

    override fun value3(value: Long?): CartItemsRecord {
        this.productVariantId = value
        return this
    }

    override fun value4(value: BigDecimal?): CartItemsRecord {
        this.quantity = value
        return this
    }

    override fun value5(value: OffsetDateTime?): CartItemsRecord {
        this.addedAt = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?, value4: BigDecimal?, value5: OffsetDateTime?): CartItemsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised CartItemsRecord
     */
    constructor(id: Long? = null, userId: Long? = null, productVariantId: Long? = null, quantity: BigDecimal? = null, addedAt: OffsetDateTime? = null): this() {
        this.id = id
        this.userId = userId
        this.productVariantId = productVariantId
        this.quantity = quantity
        this.addedAt = addedAt
    }

    /**
     * Create a detached, initialised CartItemsRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.CartItems?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.productVariantId = value.productVariantId
            this.quantity = value.quantity
            this.addedAt = value.addedAt
        }
    }
}

/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.tables.Orders
import com.dirtycouture.db.generated.tables.records.OrdersRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class OrdersDao(configuration: Configuration?) : DAOImpl<OrdersRecord, com.dirtycouture.db.generated.tables.pojos.Orders, Long>(Orders.ORDERS, com.dirtycouture.db.generated.tables.pojos.Orders::class.java, configuration) {

    /**
     * Create a new OrdersDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.Orders): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.Orders? = fetchOne(Orders.ORDERS.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.USER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>shipping_address_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfShippingAddressId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.SHIPPING_ADDRESS_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>shipping_address_id IN (values)</code>
     */
    fun fetchByShippingAddressId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.SHIPPING_ADDRESS_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>total BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfTotal(lowerInclusive: Double?, upperInclusive: Double?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.TOTAL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>total IN (values)</code>
     */
    fun fetchByTotal(vararg values: Double): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.TOTAL, *values.toTypedArray())

    /**
     * Fetch records that have <code>status BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStatus(lowerInclusive: Short?, upperInclusive: Short?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.STATUS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>status IN (values)</code>
     */
    fun fetchByStatus(vararg values: Short): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.STATUS, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetchRange(Orders.ORDERS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.Orders> = fetch(Orders.ORDERS.CREATED_AT, *values)
}

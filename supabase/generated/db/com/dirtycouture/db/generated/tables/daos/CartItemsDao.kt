/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.tables.CartItems
import com.dirtycouture.db.generated.tables.records.CartItemsRecord

import java.math.BigDecimal
import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class CartItemsDao(configuration: Configuration?) : DAOImpl<CartItemsRecord, com.dirtycouture.db.generated.tables.pojos.CartItems, Long>(CartItems.CART_ITEMS, com.dirtycouture.db.generated.tables.pojos.CartItems::class.java, configuration) {

    /**
     * Create a new CartItemsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.CartItems): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetchRange(CartItems.CART_ITEMS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetch(CartItems.CART_ITEMS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.CartItems? = fetchOne(CartItems.CART_ITEMS.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetchRange(CartItems.CART_ITEMS.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetch(CartItems.CART_ITEMS.USER_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>product_variant_id BETWEEN lowerInclusive
     * AND upperInclusive</code>
     */
    fun fetchRangeOfProductVariantId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetchRange(CartItems.CART_ITEMS.PRODUCT_VARIANT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_variant_id IN (values)</code>
     */
    fun fetchByProductVariantId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetch(CartItems.CART_ITEMS.PRODUCT_VARIANT_ID, *values.toTypedArray())

    /**
     * Fetch records that have <code>quantity BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfQuantity(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetchRange(CartItems.CART_ITEMS.QUANTITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>quantity IN (values)</code>
     */
    fun fetchByQuantity(vararg values: BigDecimal): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetch(CartItems.CART_ITEMS.QUANTITY, *values)

    /**
     * Fetch records that have <code>added_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAddedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetchRange(CartItems.CART_ITEMS.ADDED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>added_at IN (values)</code>
     */
    fun fetchByAddedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.CartItems> = fetch(CartItems.CART_ITEMS.ADDED_AT, *values)
}

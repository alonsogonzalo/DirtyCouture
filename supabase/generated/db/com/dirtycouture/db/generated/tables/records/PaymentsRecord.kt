/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.enums.PaymentStatus
import com.dirtycouture.db.generated.tables.Payments

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record7
import org.jooq.Row7
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PaymentsRecord() : UpdatableRecordImpl<PaymentsRecord>(Payments.PAYMENTS), Record7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var orderId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var stripePaymentId: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var amount: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    open var paymentMethod: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    open var status: PaymentStatus?
        set(value): Unit = set(6, value)
        get(): PaymentStatus? = get(6) as PaymentStatus?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?> = super.fieldsRow() as Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?>
    override fun valuesRow(): Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?> = super.valuesRow() as Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?>
    override fun field1(): Field<Long?> = Payments.PAYMENTS.ID
    override fun field2(): Field<Long?> = Payments.PAYMENTS.ORDER_ID
    override fun field3(): Field<String?> = Payments.PAYMENTS.STRIPE_PAYMENT_ID
    override fun field4(): Field<Double?> = Payments.PAYMENTS.AMOUNT
    override fun field5(): Field<String?> = Payments.PAYMENTS.PAYMENT_METHOD
    override fun field6(): Field<OffsetDateTime?> = Payments.PAYMENTS.CREATED_AT
    override fun field7(): Field<PaymentStatus?> = Payments.PAYMENTS.STATUS
    override fun component1(): Long? = id
    override fun component2(): Long? = orderId
    override fun component3(): String? = stripePaymentId
    override fun component4(): Double? = amount
    override fun component5(): String? = paymentMethod
    override fun component6(): OffsetDateTime? = createdAt
    override fun component7(): PaymentStatus? = status
    override fun value1(): Long? = id
    override fun value2(): Long? = orderId
    override fun value3(): String? = stripePaymentId
    override fun value4(): Double? = amount
    override fun value5(): String? = paymentMethod
    override fun value6(): OffsetDateTime? = createdAt
    override fun value7(): PaymentStatus? = status

    override fun value1(value: Long?): PaymentsRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): PaymentsRecord {
        this.orderId = value
        return this
    }

    override fun value3(value: String?): PaymentsRecord {
        this.stripePaymentId = value
        return this
    }

    override fun value4(value: Double?): PaymentsRecord {
        this.amount = value
        return this
    }

    override fun value5(value: String?): PaymentsRecord {
        this.paymentMethod = value
        return this
    }

    override fun value6(value: OffsetDateTime?): PaymentsRecord {
        this.createdAt = value
        return this
    }

    override fun value7(value: PaymentStatus?): PaymentsRecord {
        this.status = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: Double?, value5: String?, value6: OffsetDateTime?, value7: PaymentStatus?): PaymentsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        return this
    }

    /**
     * Create a detached, initialised PaymentsRecord
     */
    constructor(id: Long? = null, orderId: Long? = null, stripePaymentId: String? = null, amount: Double? = null, paymentMethod: String? = null, createdAt: OffsetDateTime? = null, status: PaymentStatus? = null): this() {
        this.id = id
        this.orderId = orderId
        this.stripePaymentId = stripePaymentId
        this.amount = amount
        this.paymentMethod = paymentMethod
        this.createdAt = createdAt
        this.status = status
    }

    /**
     * Create a detached, initialised PaymentsRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.Payments?): this() {
        if (value != null) {
            this.id = value.id
            this.orderId = value.orderId
            this.stripePaymentId = value.stripePaymentId
            this.amount = value.amount
            this.paymentMethod = value.paymentMethod
            this.createdAt = value.createdAt
            this.status = value.status
        }
    }
}

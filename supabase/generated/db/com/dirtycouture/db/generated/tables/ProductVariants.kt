/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables


import com.dirtycouture.db.generated.Public
import com.dirtycouture.db.generated.enums.Sizes
import com.dirtycouture.db.generated.keys.PRODUCT_VARIANTS_PKEY
import com.dirtycouture.db.generated.keys.PRODUCT_VARIANTS_PRODUCT_ID_KEY
import com.dirtycouture.db.generated.keys.PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY
import com.dirtycouture.db.generated.tables.records.ProductVariantsRecord

import java.math.BigDecimal
import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row8
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductVariants(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, ProductVariantsRecord>?,
    aliased: Table<ProductVariantsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<ProductVariantsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.product_variants</code>
         */
        val PRODUCT_VARIANTS: ProductVariants = ProductVariants()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<ProductVariantsRecord> = ProductVariantsRecord::class.java

    /**
     * The column <code>public.product_variants.id</code>.
     */
    val ID: TableField<ProductVariantsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.product_variants.product_id</code>.
     */
    val PRODUCT_ID: TableField<ProductVariantsRecord, Long?> = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "")

    /**
     * The column <code>public.product_variants.size</code>.
     */
    val SIZE: TableField<ProductVariantsRecord, Sizes?> = createField(DSL.name("size"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.dirtycouture.db.generated.enums.Sizes::class.java), this, "")

    /**
     * The column <code>public.product_variants.color</code>.
     */
    val COLOR: TableField<ProductVariantsRecord, String?> = createField(DSL.name("color"), SQLDataType.VARCHAR.nullable(false), this, "")

    /**
     * The column <code>public.product_variants.stock</code>.
     */
    val STOCK: TableField<ProductVariantsRecord, BigDecimal?> = createField(DSL.name("stock"), SQLDataType.NUMERIC, this, "")

    /**
     * The column <code>public.product_variants.price</code>.
     */
    val PRICE: TableField<ProductVariantsRecord, Double?> = createField(DSL.name("price"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>public.product_variants.created_at</code>.
     */
    val CREATED_AT: TableField<ProductVariantsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("(now() AT TIME ZONE 'utc'::text)", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.product_variants.image_url</code>.
     */
    val IMAGE_URL: TableField<ProductVariantsRecord, String?> = createField(DSL.name("image_url"), SQLDataType.CLOB, this, "")

    private constructor(alias: Name, aliased: Table<ProductVariantsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<ProductVariantsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.product_variants</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.product_variants</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.product_variants</code> table reference
     */
    constructor(): this(DSL.name("product_variants"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, ProductVariantsRecord>): this(Internal.createPathAlias(child, key), child, key, PRODUCT_VARIANTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<ProductVariantsRecord, Long?> = super.getIdentity() as Identity<ProductVariantsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<ProductVariantsRecord> = PRODUCT_VARIANTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<ProductVariantsRecord>> = listOf(PRODUCT_VARIANTS_PRODUCT_ID_KEY)
    override fun getReferences(): List<ForeignKey<ProductVariantsRecord, *>> = listOf(PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY)

    private lateinit var _products: Products

    /**
     * Get the implicit join path to the <code>public.products</code> table.
     */
    fun products(): Products {
        if (!this::_products.isInitialized)
            _products = Products(this, PRODUCT_VARIANTS__PRODUCT_VARIANTS_PRODUCT_ID_FKEY)

        return _products;
    }

    val products: Products
        get(): Products = products()
    override fun `as`(alias: String): ProductVariants = ProductVariants(DSL.name(alias), this)
    override fun `as`(alias: Name): ProductVariants = ProductVariants(alias, this)
    override fun `as`(alias: Table<*>): ProductVariants = ProductVariants(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): ProductVariants = ProductVariants(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): ProductVariants = ProductVariants(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): ProductVariants = ProductVariants(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?> = super.fieldsRow() as Row8<Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, Sizes?, String?, BigDecimal?, Double?, OffsetDateTime?, String?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

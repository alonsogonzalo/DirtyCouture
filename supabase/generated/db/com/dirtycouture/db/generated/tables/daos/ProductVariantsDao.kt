/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.enums.Sizes
import com.dirtycouture.db.generated.tables.ProductVariants
import com.dirtycouture.db.generated.tables.records.ProductVariantsRecord

import java.math.BigDecimal
import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductVariantsDao(configuration: Configuration?) : DAOImpl<ProductVariantsRecord, com.dirtycouture.db.generated.tables.pojos.ProductVariants, Long>(ProductVariants.PRODUCT_VARIANTS, com.dirtycouture.db.generated.tables.pojos.ProductVariants::class.java, configuration) {

    /**
     * Create a new ProductVariantsDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.ProductVariants): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.ProductVariants? = fetchOne(ProductVariants.PRODUCT_VARIANTS.ID, value)

    /**
     * Fetch records that have <code>product_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfProductId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.PRODUCT_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>product_id IN (values)</code>
     */
    fun fetchByProductId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.PRODUCT_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>product_id = value</code>
     */
    fun fetchOneByProductId(value: Long): com.dirtycouture.db.generated.tables.pojos.ProductVariants? = fetchOne(ProductVariants.PRODUCT_VARIANTS.PRODUCT_ID, value)

    /**
     * Fetch records that have <code>size BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfSize(lowerInclusive: Sizes?, upperInclusive: Sizes?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.SIZE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>size IN (values)</code>
     */
    fun fetchBySize(vararg values: Sizes): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.SIZE, *values)

    /**
     * Fetch records that have <code>color BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfColor(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.COLOR, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>color IN (values)</code>
     */
    fun fetchByColor(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.COLOR, *values)

    /**
     * Fetch records that have <code>stock BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfStock(lowerInclusive: BigDecimal?, upperInclusive: BigDecimal?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.STOCK, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>stock IN (values)</code>
     */
    fun fetchByStock(vararg values: BigDecimal): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.STOCK, *values)

    /**
     * Fetch records that have <code>price BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPrice(lowerInclusive: Double?, upperInclusive: Double?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.PRICE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>price IN (values)</code>
     */
    fun fetchByPrice(vararg values: Double): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.PRICE, *values.toTypedArray())

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.CREATED_AT, *values)

    /**
     * Fetch records that have <code>image_url BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfImageUrl(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetchRange(ProductVariants.PRODUCT_VARIANTS.IMAGE_URL, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>image_url IN (values)</code>
     */
    fun fetchByImageUrl(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ProductVariants> = fetch(ProductVariants.PRODUCT_VARIANTS.IMAGE_URL, *values)
}

/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.tables.Products

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record6
import org.jooq.Row6
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ProductsRecord() : UpdatableRecordImpl<ProductsRecord>(Products.PRODUCTS), Record6<Long?, String?, String?, Double?, String?, OffsetDateTime?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var name: String?
        set(value): Unit = set(1, value)
        get(): String? = get(1) as String?

    open var description: String?
        set(value): Unit = set(2, value)
        get(): String? = get(2) as String?

    open var price: Double?
        set(value): Unit = set(3, value)
        get(): Double? = get(3) as Double?

    open var imageUrl: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(5, value)
        get(): OffsetDateTime? = get(5) as OffsetDateTime?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row6<Long?, String?, String?, Double?, String?, OffsetDateTime?> = super.fieldsRow() as Row6<Long?, String?, String?, Double?, String?, OffsetDateTime?>
    override fun valuesRow(): Row6<Long?, String?, String?, Double?, String?, OffsetDateTime?> = super.valuesRow() as Row6<Long?, String?, String?, Double?, String?, OffsetDateTime?>
    override fun field1(): Field<Long?> = Products.PRODUCTS.ID
    override fun field2(): Field<String?> = Products.PRODUCTS.NAME
    override fun field3(): Field<String?> = Products.PRODUCTS.DESCRIPTION
    override fun field4(): Field<Double?> = Products.PRODUCTS.PRICE
    override fun field5(): Field<String?> = Products.PRODUCTS.IMAGE_URL
    override fun field6(): Field<OffsetDateTime?> = Products.PRODUCTS.CREATED_AT
    override fun component1(): Long? = id
    override fun component2(): String? = name
    override fun component3(): String? = description
    override fun component4(): Double? = price
    override fun component5(): String? = imageUrl
    override fun component6(): OffsetDateTime? = createdAt
    override fun value1(): Long? = id
    override fun value2(): String? = name
    override fun value3(): String? = description
    override fun value4(): Double? = price
    override fun value5(): String? = imageUrl
    override fun value6(): OffsetDateTime? = createdAt

    override fun value1(value: Long?): ProductsRecord {
        this.id = value
        return this
    }

    override fun value2(value: String?): ProductsRecord {
        this.name = value
        return this
    }

    override fun value3(value: String?): ProductsRecord {
        this.description = value
        return this
    }

    override fun value4(value: Double?): ProductsRecord {
        this.price = value
        return this
    }

    override fun value5(value: String?): ProductsRecord {
        this.imageUrl = value
        return this
    }

    override fun value6(value: OffsetDateTime?): ProductsRecord {
        this.createdAt = value
        return this
    }

    override fun values(value1: Long?, value2: String?, value3: String?, value4: Double?, value5: String?, value6: OffsetDateTime?): ProductsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        return this
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    constructor(id: Long? = null, name: String? = null, description: String? = null, price: Double? = null, imageUrl: String? = null, createdAt: OffsetDateTime? = null): this() {
        this.id = id
        this.name = name
        this.description = description
        this.price = price
        this.imageUrl = imageUrl
        this.createdAt = createdAt
    }

    /**
     * Create a detached, initialised ProductsRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.Products?): this() {
        if (value != null) {
            this.id = value.id
            this.name = value.name
            this.description = value.description
            this.price = value.price
            this.imageUrl = value.imageUrl
            this.createdAt = value.createdAt
        }
    }
}

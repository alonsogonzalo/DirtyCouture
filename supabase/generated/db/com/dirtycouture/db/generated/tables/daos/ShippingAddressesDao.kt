/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.daos


import com.dirtycouture.db.generated.tables.ShippingAddresses
import com.dirtycouture.db.generated.tables.records.ShippingAddressesRecord

import java.time.OffsetDateTime

import kotlin.collections.List

import org.jooq.Configuration
import org.jooq.impl.DAOImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShippingAddressesDao(configuration: Configuration?) : DAOImpl<ShippingAddressesRecord, com.dirtycouture.db.generated.tables.pojos.ShippingAddresses, Long>(ShippingAddresses.SHIPPING_ADDRESSES, com.dirtycouture.db.generated.tables.pojos.ShippingAddresses::class.java, configuration) {

    /**
     * Create a new ShippingAddressesDao without any configuration
     */
    constructor(): this(null)

    override fun getId(o: com.dirtycouture.db.generated.tables.pojos.ShippingAddresses): Long? = o.id

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    fun fetchById(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    fun fetchOneById(value: Long): com.dirtycouture.db.generated.tables.pojos.ShippingAddresses? = fetchOne(ShippingAddresses.SHIPPING_ADDRESSES.ID, value)

    /**
     * Fetch records that have <code>user_id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfUserId(lowerInclusive: Long?, upperInclusive: Long?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.USER_ID, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>user_id IN (values)</code>
     */
    fun fetchByUserId(vararg values: Long): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.USER_ID, *values.toTypedArray())

    /**
     * Fetch a unique record that has <code>user_id = value</code>
     */
    fun fetchOneByUserId(value: Long): com.dirtycouture.db.generated.tables.pojos.ShippingAddresses? = fetchOne(ShippingAddresses.SHIPPING_ADDRESSES.USER_ID, value)

    /**
     * Fetch records that have <code>created_at BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCreatedAt(lowerInclusive: OffsetDateTime?, upperInclusive: OffsetDateTime?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.CREATED_AT, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>created_at IN (values)</code>
     */
    fun fetchByCreatedAt(vararg values: OffsetDateTime): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.CREATED_AT, *values)

    /**
     * Fetch records that have <code>full_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfFullName(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.FULL_NAME, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>full_name IN (values)</code>
     */
    fun fetchByFullName(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.FULL_NAME, *values)

    /**
     * Fetch records that have <code>address BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfAddress(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.ADDRESS, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>address IN (values)</code>
     */
    fun fetchByAddress(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.ADDRESS, *values)

    /**
     * Fetch records that have <code>city BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCity(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.CITY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>city IN (values)</code>
     */
    fun fetchByCity(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.CITY, *values)

    /**
     * Fetch records that have <code>state BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfState(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.STATE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>state IN (values)</code>
     */
    fun fetchByState(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.STATE, *values)

    /**
     * Fetch records that have <code>zip_code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfZipCode(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.ZIP_CODE, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>zip_code IN (values)</code>
     */
    fun fetchByZipCode(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.ZIP_CODE, *values)

    /**
     * Fetch records that have <code>country BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfCountry(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.COUNTRY, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>country IN (values)</code>
     */
    fun fetchByCountry(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.COUNTRY, *values)

    /**
     * Fetch records that have <code>phone_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    fun fetchRangeOfPhoneNumber(lowerInclusive: String?, upperInclusive: String?): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetchRange(ShippingAddresses.SHIPPING_ADDRESSES.PHONE_NUMBER, lowerInclusive, upperInclusive)

    /**
     * Fetch records that have <code>phone_number IN (values)</code>
     */
    fun fetchByPhoneNumber(vararg values: String): List<com.dirtycouture.db.generated.tables.pojos.ShippingAddresses> = fetch(ShippingAddresses.SHIPPING_ADDRESSES.PHONE_NUMBER, *values)
}

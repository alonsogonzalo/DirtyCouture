/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables


import com.dirtycouture.db.generated.Public
import com.dirtycouture.db.generated.enums.PaymentStatus
import com.dirtycouture.db.generated.keys.PAYMENTS_PKEY
import com.dirtycouture.db.generated.keys.PAYMENTS_STRIPE_PAYMENT_ID_KEY
import com.dirtycouture.db.generated.keys.PAYMENTS__PAYMENTS_ORDER_ID_FKEY
import com.dirtycouture.db.generated.tables.records.PaymentsRecord

import java.time.OffsetDateTime
import java.util.function.Function

import kotlin.collections.List

import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Identity
import org.jooq.Name
import org.jooq.Record
import org.jooq.Records
import org.jooq.Row7
import org.jooq.Schema
import org.jooq.SelectField
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Payments(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, PaymentsRecord>?,
    aliased: Table<PaymentsRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<PaymentsRecord>(
    alias,
    Public.PUBLIC,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>public.payments</code>
         */
        val PAYMENTS: Payments = Payments()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<PaymentsRecord> = PaymentsRecord::class.java

    /**
     * The column <code>public.payments.id</code>.
     */
    val ID: TableField<PaymentsRecord, Long?> = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "")

    /**
     * The column <code>public.payments.order_id</code>.
     */
    val ORDER_ID: TableField<PaymentsRecord, Long?> = createField(DSL.name("order_id"), SQLDataType.BIGINT, this, "")

    /**
     * The column <code>public.payments.stripe_payment_id</code>.
     */
    val STRIPE_PAYMENT_ID: TableField<PaymentsRecord, String?> = createField(DSL.name("stripe_payment_id"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.payments.amount</code>.
     */
    val AMOUNT: TableField<PaymentsRecord, Double?> = createField(DSL.name("amount"), SQLDataType.DOUBLE.nullable(false), this, "")

    /**
     * The column <code>public.payments.payment_method</code>.
     */
    val PAYMENT_METHOD: TableField<PaymentsRecord, String?> = createField(DSL.name("payment_method"), SQLDataType.CLOB.nullable(false), this, "")

    /**
     * The column <code>public.payments.created_at</code>.
     */
    val CREATED_AT: TableField<PaymentsRecord, OffsetDateTime?> = createField(DSL.name("created_at"), SQLDataType.TIMESTAMPWITHTIMEZONE(6).nullable(false).defaultValue(DSL.field("now()", SQLDataType.TIMESTAMPWITHTIMEZONE)), this, "")

    /**
     * The column <code>public.payments.status</code>.
     */
    val STATUS: TableField<PaymentsRecord, PaymentStatus?> = createField(DSL.name("status"), SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.dirtycouture.db.generated.enums.PaymentStatus::class.java), this, "")

    private constructor(alias: Name, aliased: Table<PaymentsRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<PaymentsRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>public.payments</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>public.payments</code> table reference
     */
    constructor(): this(DSL.name("payments"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, PaymentsRecord>): this(Internal.createPathAlias(child, key), child, key, PAYMENTS, null)
    override fun getSchema(): Schema? = if (aliased()) null else Public.PUBLIC
    override fun getIdentity(): Identity<PaymentsRecord, Long?> = super.getIdentity() as Identity<PaymentsRecord, Long?>
    override fun getPrimaryKey(): UniqueKey<PaymentsRecord> = PAYMENTS_PKEY
    override fun getUniqueKeys(): List<UniqueKey<PaymentsRecord>> = listOf(PAYMENTS_STRIPE_PAYMENT_ID_KEY)
    override fun getReferences(): List<ForeignKey<PaymentsRecord, *>> = listOf(PAYMENTS__PAYMENTS_ORDER_ID_FKEY)

    private lateinit var _orders: Orders

    /**
     * Get the implicit join path to the <code>public.orders</code> table.
     */
    fun orders(): Orders {
        if (!this::_orders.isInitialized)
            _orders = Orders(this, PAYMENTS__PAYMENTS_ORDER_ID_FKEY)

        return _orders;
    }

    val orders: Orders
        get(): Orders = orders()
    override fun `as`(alias: String): Payments = Payments(DSL.name(alias), this)
    override fun `as`(alias: Name): Payments = Payments(alias, this)
    override fun `as`(alias: Table<*>): Payments = Payments(alias.getQualifiedName(), this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Payments = Payments(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Payments = Payments(name, null)

    /**
     * Rename this table
     */
    override fun rename(name: Table<*>): Payments = Payments(name.getQualifiedName(), null)

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?> = super.fieldsRow() as Row7<Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?>

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    fun <U> mapping(from: (Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?) -> U): SelectField<U> = convertFrom(Records.mapping(from))

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    fun <U> mapping(toType: Class<U>, from: (Long?, Long?, String?, Double?, String?, OffsetDateTime?, PaymentStatus?) -> U): SelectField<U> = convertFrom(toType, Records.mapping(from))
}

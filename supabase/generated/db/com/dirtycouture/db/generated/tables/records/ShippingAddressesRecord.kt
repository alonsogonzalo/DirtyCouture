/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.tables.ShippingAddresses

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record10
import org.jooq.Row10
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ShippingAddressesRecord() : UpdatableRecordImpl<ShippingAddressesRecord>(ShippingAddresses.SHIPPING_ADDRESSES), Record10<Long?, Long?, OffsetDateTime?, String?, String?, String?, String?, String?, String?, String?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var userId: Long?
        set(value): Unit = set(1, value)
        get(): Long? = get(1) as Long?

    open var createdAt: OffsetDateTime?
        set(value): Unit = set(2, value)
        get(): OffsetDateTime? = get(2) as OffsetDateTime?

    open var fullName: String?
        set(value): Unit = set(3, value)
        get(): String? = get(3) as String?

    open var address: String?
        set(value): Unit = set(4, value)
        get(): String? = get(4) as String?

    open var city: String?
        set(value): Unit = set(5, value)
        get(): String? = get(5) as String?

    open var state: String?
        set(value): Unit = set(6, value)
        get(): String? = get(6) as String?

    open var zipCode: String?
        set(value): Unit = set(7, value)
        get(): String? = get(7) as String?

    open var country: String?
        set(value): Unit = set(8, value)
        get(): String? = get(8) as String?

    open var phoneNumber: String?
        set(value): Unit = set(9, value)
        get(): String? = get(9) as String?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record10 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row10<Long?, Long?, OffsetDateTime?, String?, String?, String?, String?, String?, String?, String?> = super.fieldsRow() as Row10<Long?, Long?, OffsetDateTime?, String?, String?, String?, String?, String?, String?, String?>
    override fun valuesRow(): Row10<Long?, Long?, OffsetDateTime?, String?, String?, String?, String?, String?, String?, String?> = super.valuesRow() as Row10<Long?, Long?, OffsetDateTime?, String?, String?, String?, String?, String?, String?, String?>
    override fun field1(): Field<Long?> = ShippingAddresses.SHIPPING_ADDRESSES.ID
    override fun field2(): Field<Long?> = ShippingAddresses.SHIPPING_ADDRESSES.USER_ID
    override fun field3(): Field<OffsetDateTime?> = ShippingAddresses.SHIPPING_ADDRESSES.CREATED_AT
    override fun field4(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.FULL_NAME
    override fun field5(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.ADDRESS
    override fun field6(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.CITY
    override fun field7(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.STATE
    override fun field8(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.ZIP_CODE
    override fun field9(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.COUNTRY
    override fun field10(): Field<String?> = ShippingAddresses.SHIPPING_ADDRESSES.PHONE_NUMBER
    override fun component1(): Long? = id
    override fun component2(): Long? = userId
    override fun component3(): OffsetDateTime? = createdAt
    override fun component4(): String? = fullName
    override fun component5(): String? = address
    override fun component6(): String? = city
    override fun component7(): String? = state
    override fun component8(): String? = zipCode
    override fun component9(): String? = country
    override fun component10(): String? = phoneNumber
    override fun value1(): Long? = id
    override fun value2(): Long? = userId
    override fun value3(): OffsetDateTime? = createdAt
    override fun value4(): String? = fullName
    override fun value5(): String? = address
    override fun value6(): String? = city
    override fun value7(): String? = state
    override fun value8(): String? = zipCode
    override fun value9(): String? = country
    override fun value10(): String? = phoneNumber

    override fun value1(value: Long?): ShippingAddressesRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): ShippingAddressesRecord {
        this.userId = value
        return this
    }

    override fun value3(value: OffsetDateTime?): ShippingAddressesRecord {
        this.createdAt = value
        return this
    }

    override fun value4(value: String?): ShippingAddressesRecord {
        this.fullName = value
        return this
    }

    override fun value5(value: String?): ShippingAddressesRecord {
        this.address = value
        return this
    }

    override fun value6(value: String?): ShippingAddressesRecord {
        this.city = value
        return this
    }

    override fun value7(value: String?): ShippingAddressesRecord {
        this.state = value
        return this
    }

    override fun value8(value: String?): ShippingAddressesRecord {
        this.zipCode = value
        return this
    }

    override fun value9(value: String?): ShippingAddressesRecord {
        this.country = value
        return this
    }

    override fun value10(value: String?): ShippingAddressesRecord {
        this.phoneNumber = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: OffsetDateTime?, value4: String?, value5: String?, value6: String?, value7: String?, value8: String?, value9: String?, value10: String?): ShippingAddressesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        this.value9(value9)
        this.value10(value10)
        return this
    }

    /**
     * Create a detached, initialised ShippingAddressesRecord
     */
    constructor(id: Long? = null, userId: Long? = null, createdAt: OffsetDateTime? = null, fullName: String? = null, address: String? = null, city: String? = null, state: String? = null, zipCode: String? = null, country: String? = null, phoneNumber: String? = null): this() {
        this.id = id
        this.userId = userId
        this.createdAt = createdAt
        this.fullName = fullName
        this.address = address
        this.city = city
        this.state = state
        this.zipCode = zipCode
        this.country = country
        this.phoneNumber = phoneNumber
    }

    /**
     * Create a detached, initialised ShippingAddressesRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.ShippingAddresses?): this() {
        if (value != null) {
            this.id = value.id
            this.userId = value.userId
            this.createdAt = value.createdAt
            this.fullName = value.fullName
            this.address = value.address
            this.city = value.city
            this.state = value.state
            this.zipCode = value.zipCode
            this.country = value.country
            this.phoneNumber = value.phoneNumber
        }
    }
}

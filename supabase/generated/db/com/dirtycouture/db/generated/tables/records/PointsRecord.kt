/*
 * This file is generated by jOOQ.
 */
package com.dirtycouture.db.generated.tables.records


import com.dirtycouture.db.generated.tables.Points

import java.time.OffsetDateTime

import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record5
import org.jooq.Row5
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class PointsRecord() : UpdatableRecordImpl<PointsRecord>(Points.POINTS), Record5<Long?, OffsetDateTime?, Long?, Long?, Long?> {

    open var id: Long?
        set(value): Unit = set(0, value)
        get(): Long? = get(0) as Long?

    open var addedAt: OffsetDateTime?
        set(value): Unit = set(1, value)
        get(): OffsetDateTime? = get(1) as OffsetDateTime?

    open var userId: Long?
        set(value): Unit = set(2, value)
        get(): Long? = get(2) as Long?

    open var lastAddedPoints: Long?
        set(value): Unit = set(3, value)
        get(): Long? = get(3) as Long?

    open var pointsBalance: Long?
        set(value): Unit = set(4, value)
        get(): Long? = get(4) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row5<Long?, OffsetDateTime?, Long?, Long?, Long?> = super.fieldsRow() as Row5<Long?, OffsetDateTime?, Long?, Long?, Long?>
    override fun valuesRow(): Row5<Long?, OffsetDateTime?, Long?, Long?, Long?> = super.valuesRow() as Row5<Long?, OffsetDateTime?, Long?, Long?, Long?>
    override fun field1(): Field<Long?> = Points.POINTS.ID
    override fun field2(): Field<OffsetDateTime?> = Points.POINTS.ADDED_AT
    override fun field3(): Field<Long?> = Points.POINTS.USER_ID
    override fun field4(): Field<Long?> = Points.POINTS.LAST_ADDED_POINTS
    override fun field5(): Field<Long?> = Points.POINTS.POINTS_BALANCE
    override fun component1(): Long? = id
    override fun component2(): OffsetDateTime? = addedAt
    override fun component3(): Long? = userId
    override fun component4(): Long? = lastAddedPoints
    override fun component5(): Long? = pointsBalance
    override fun value1(): Long? = id
    override fun value2(): OffsetDateTime? = addedAt
    override fun value3(): Long? = userId
    override fun value4(): Long? = lastAddedPoints
    override fun value5(): Long? = pointsBalance

    override fun value1(value: Long?): PointsRecord {
        this.id = value
        return this
    }

    override fun value2(value: OffsetDateTime?): PointsRecord {
        this.addedAt = value
        return this
    }

    override fun value3(value: Long?): PointsRecord {
        this.userId = value
        return this
    }

    override fun value4(value: Long?): PointsRecord {
        this.lastAddedPoints = value
        return this
    }

    override fun value5(value: Long?): PointsRecord {
        this.pointsBalance = value
        return this
    }

    override fun values(value1: Long?, value2: OffsetDateTime?, value3: Long?, value4: Long?, value5: Long?): PointsRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        return this
    }

    /**
     * Create a detached, initialised PointsRecord
     */
    constructor(id: Long? = null, addedAt: OffsetDateTime? = null, userId: Long? = null, lastAddedPoints: Long? = null, pointsBalance: Long? = null): this() {
        this.id = id
        this.addedAt = addedAt
        this.userId = userId
        this.lastAddedPoints = lastAddedPoints
        this.pointsBalance = pointsBalance
    }

    /**
     * Create a detached, initialised PointsRecord
     */
    constructor(value: com.dirtycouture.db.generated.tables.pojos.Points?): this() {
        if (value != null) {
            this.id = value.id
            this.addedAt = value.addedAt
            this.userId = value.userId
            this.lastAddedPoints = value.lastAddedPoints
            this.pointsBalance = value.pointsBalance
        }
    }
}
